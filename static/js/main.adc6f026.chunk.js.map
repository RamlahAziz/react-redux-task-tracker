{"version":3,"sources":["redux/task/taskTypes.js","redux/task/taskActions.js","components/Form.js","components/Task.js","components/Header.js","redux/user/userTypes.js","redux/user/userActions.js","components/UserContainer.js","components/ToDo.js","components/Navbar.js","components/UserDetails.js","App.js","redux/user/userReducer.js","redux/task/taskReducer.js","redux/rootReducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["ADD_TASK","DELETE_TASK","TASK_COMPLETED","SHOW_PENDING_TASKS","setShowPendingTasks","status","type","actionTypes","payload","Form","useState","text","setText","color","setColor","dispatch","useDispatch","className","onSubmit","e","preventDefault","id","Date","now","addTask","target","reset","name","placeholder","onChange","value","required","style","background","defaultValue","Task","task","showPendingTasks","useSelector","state","Header","onClick","FETCH_USERS_REQUEST","FETCH_USERS_SUCCESS","FETCH_USER_SUCCESS","FETCH_USERS_FAILURE","SELECT_USER","fetchUsersRequest","fetchUsersFailure","error","fetchUsers","axios","get","then","response","users","data","map","fetchUsersSuccess","catch","errorMsg","message","fetchUser","user","fetchUserSuccess","UserContainer","props","userList","useEffect","handleClick","selectUser","history","push","loading","ToDo","tasks","matches","buttonClicked","classList","completeTask","deleteTask","filter","completed","Navbar","to","UserDetails","userData","selected","username","email","website","phone","company","address","city","App","exact","path","component","initialState","userReducer","action","taskReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adc6f026.chunk.js","sourcesContent":["export const ADD_TASK = \"ADD_TASK\";\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\nexport const TASK_COMPLETED = \"TASK_COMPLETED\";\r\nexport const SHOW_PENDING_TASKS = \"SHOW_PENDING_TASKS\";\r\n","// Action Creators\n// Add task\n// Delete task\n// Mark task as completed\n// Show pending tasks : true / false\n\nimport * as actionTypes from \"./taskTypes\";\n\nexport const addTask = (text, color) => {\n    // QUESTION ???\n    const id = Date.now();\n    return {\n        type: actionTypes.ADD_TASK,\n        payload: {\n            id,\n            text,\n            color,\n        },\n    };\n};\n\nexport const deleteTask = (id) => {\n    return {\n        type: actionTypes.DELETE_TASK,\n        payload: {\n            id,\n        },\n    };\n};\n\nexport const completeTask = (id) => {\n    return {\n        type: actionTypes.TASK_COMPLETED,\n        payload: {\n            id,\n        },\n    };\n};\n\nexport const setShowPendingTasks = (status = true) => {\n    return {\n        type: actionTypes.SHOW_PENDING_TASKS,\n        payload: {\n            status: status, //does not work status: status = true\n        },\n    };\n};\n","import React, { useState } from \"react\";\r\nimport { addTask } from \"../redux/task/taskActions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport default function Form() {\r\n    const [text, setText] = useState(\"\");\r\n    const [color, setColor] = useState(\"#f58f29\");\r\n\r\n    const handleTextChange = e => setText(e.target.value);\r\n\r\n    const handleColorChange = e => setColor(e.target.value);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        dispatch(addTask(text, color));\r\n        e.target.reset();\r\n    };\r\n\r\n    return (\r\n        <form className=\"add-tasks\" onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                name=\"task\"\r\n                placeholder=\"Enter Task\"\r\n                // value={text}\r\n                onChange={handleTextChange}\r\n                required\r\n            />\r\n            <div className=\"colordiv\" style={{ background: color }}>\r\n                <input\r\n                    type=\"color\"\r\n                    name=\"color\"\r\n                    defaultValue={color}\r\n                    onChange={handleColorChange}\r\n                    required\r\n                />\r\n            </div>\r\n\r\n            <input type=\"submit\" value=\"+ Add Task\" />\r\n        </form>\r\n    );\r\n}\r\n\r\n// accepts ownProps as second Function\r\n// const mapDispatchToProps = (dispatch, ownProps) => {\r\n//     return {\r\n//         addTask: (text, color) => dispatch(addTask(text, color)),\r\n//     };\r\n// };\r\n\r\n// don't want to subscribe to store updates\r\n// export default connect(null, mapDispatchToProps)(Form);\r\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nexport default function Task({ task }) {\n    const showPendingTasks = useSelector(\n        (state) => state.task.showPendingTasks\n    );\n\n    return (\n        <div className='task' style={{ background: task.color }}>\n            <p>{task.text}</p>\n            {showPendingTasks && <button className='completed'>✔</button>}\n            <button className='remove'>✖</button>\n        </div>\n    );\n}\n\n//\n// const mapStateToProps = (state, ownProps) => {\n//     // here ownProps is a task object\n//     // even without ownProps, task is still passed in props to Task\n//     return {\n//         // can return state based on ownProps\n//         showPendingTasks: state.showPendingTasks,\n//     };\n// };\n// export default connect(mapStateToProps)(Task);\n","import React from \"react\";\nimport { setShowPendingTasks } from \"../redux/task/taskActions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function Header() {\n    const showPendingTasks = useSelector(\n        (state) => state.task.showPendingTasks\n    );\n    const dispatch = useDispatch();\n\n    return (\n        <div className='tab'>\n            <h2 className='title'>\n                {showPendingTasks ? \"Pending Tasks\" : \"Completed Tasks\"}\n            </h2>\n            <button\n                className={`showPending ${\n                    showPendingTasks ? \"activeButton\" : \"\"\n                }`}\n                onClick={() => dispatch(setShowPendingTasks(true))}\n            >\n                Pending\n            </button>\n            <button\n                className={`showCompleted ${\n                    showPendingTasks ? \"\" : \"activeButton\"\n                }`}\n                onClick={() => dispatch(setShowPendingTasks(false))}\n            >\n                Completed\n            </button>\n        </div>\n    );\n}\n\n// const mapStateToProps = state => {\n//     return {\n//         showPendingTasks: state.showPendingTasks,\n//     };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         setShowPendingTasks: status => dispatch(setShowPendingTasks(status)),\n//     };\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Header);\n","export const FETCH_USERS_REQUEST = \"FETCH_USERS_REQUEST\";\nexport const FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\";\nexport const FETCH_USER_SUCCESS = \"FETCH_USER_SUCCESS\";\nexport const FETCH_USERS_FAILURE = \"FETCH_USERS_FAILURE\";\nexport const SELECT_USER = \"SELECT_USER\";\n","import * as actionTypes from \"./userTypes\";\nimport axios from \"axios\";\n\nconst fetchUsersRequest = () => {\n    return {\n        type: actionTypes.FETCH_USERS_REQUEST,\n    };\n};\n\nconst fetchUsersSuccess = (users) => {\n    return {\n        type: actionTypes.FETCH_USERS_SUCCESS,\n        payload: users,\n    };\n};\n\nconst fetchUserSuccess = (user) => {\n    return {\n        type: actionTypes.FETCH_USER_SUCCESS,\n        payload: user,\n    };\n};\n\nconst fetchUsersFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_USERS_FAILURE,\n        payload: error,\n    };\n};\n\nexport const selectUser = (id) => {\n    return {\n        type: actionTypes.SELECT_USER,\n        payload: id,\n    };\n};\n\n// not like other action creators\n// returns a function\nexport const fetchUsers = () => {\n    // does not have to be pure\n    return (dispatch) => {\n        // set loading true\n        dispatch(fetchUsersRequest);\n\n        axios\n            .get(\"https://jsonplaceholder.typicode.com/users\")\n            .then((response) => {\n                const users = response.data.map(({ id, name }) => ({\n                    id,\n                    name,\n                }));\n                dispatch(fetchUsersSuccess(users));\n            })\n            .catch((error) => {\n                const errorMsg = error.message;\n                dispatch(fetchUsersFailure(errorMsg));\n            });\n    };\n};\n\nexport const fetchUser = (id) => {\n    return (dispatch) => {\n        dispatch(fetchUsersRequest);\n        axios\n            .get(`https://jsonplaceholder.typicode.com/users/${id}`)\n            .then((response) => {\n                const user = response.data;\n                dispatch(fetchUserSuccess(user));\n            })\n            .catch((error) => {\n                const errorMsg = error.message;\n                dispatch(fetchUsersFailure(errorMsg));\n            });\n    };\n};\n","import React, { useEffect } from \"react\";\nimport { fetchUsers, selectUser } from \"../redux/user/userActions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function UserContainer(props) {\n    const userList = useSelector((state) => state.user);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchUsers());\n    }, [dispatch]);\n\n    const handleClick = (e, id) => {\n        e.preventDefault();\n        dispatch(selectUser(id));\n        props.history.push(\"/userdetails\");\n    };\n\n    return (\n        <div className='wrapper'>\n            {userList.loading ? (\n                <h2>Loading</h2>\n            ) : userList.error ? (\n                <h2>{userList.error}</h2>\n            ) : (\n                <div>\n                    <h2>User List</h2>\n                    <div>\n                        {userList &&\n                            userList.users &&\n                            userList.users.map((user) => (\n                                <p\n                                    className='list'\n                                    key={user.id}\n                                    onClick={(e) => handleClick(e, user.id)}\n                                >\n                                    {user.name}\n                                </p>\n                            ))}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n","import React from \"react\";\nimport Form from \"./Form\";\nimport Task from \"./Task\";\nimport Header from \"./Header\";\nimport { deleteTask, completeTask } from \"../redux/task/taskActions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport UserContainer from \"./UserContainer\";\n\nexport default function ToDo() {\n    const tasks = useSelector(state => state.task.tasks);\n    const showPendingTasks = useSelector(state => state.task.showPendingTasks);\n    const dispatch = useDispatch();\n\n    const handleClick = (e, id) => {\n        // make sure the user has clicked the tick or cross button\n        if (!e.target.matches(\"button\")) return;\n        // find out which button and list element was clicked\n        const buttonClicked = e.target.classList.value;\n\n        // take action\n        if (buttonClicked === \"completed\") {\n            dispatch(completeTask(id));\n        } else if (buttonClicked === \"remove\") {\n            dispatch(deleteTask(id));\n        }\n    };\n\n    return (\n        <div className=\"wrapper\">\n            <Header />\n            <Form></Form>\n            <ul className=\"tasks\">\n                {tasks &&\n                    tasks\n                        .filter(task => showPendingTasks === !task.completed)\n                        .map(task => (\n                            <li\n                                key={task.id}\n                                onClick={e => handleClick(e, task.id)}>\n                                <Task task={task}></Task>\n                            </li>\n                        ))}\n            </ul>\n        </div>\n    );\n}\n\n// step 1\n// const mapStateToProps = state => {\n//     return {\n//         tasks: state.tasks,\n//         showPendingTasks: state.showPendingTasks,\n\n//         // separate file called selectors which gets things from the state\n//     };\n// };\n\n// step 2\n// map action creators to props\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         deleteTask: id => dispatch(deleteTask(id)),\n//         completeTask: id => dispatch(completeTask(id)),\n//     };\n// };\n\n// step 3\n// export default connect(mapStateToProps, mapDispatchToProps)(ToDo);\n","import React, { useState } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav>\r\n            <NavLink to=\"/\">\r\n                <button className=\"appDisplayButton\">ToDo App</button>\r\n            </NavLink>\r\n            <NavLink to=\"/users\">\r\n                <button className=\"appDisplayButton\">Users</button>\r\n            </NavLink>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useEffect } from \"react\";\r\nimport { fetchUser } from \"../redux/user/userActions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nexport default function UserDetails() {\r\n    const userData = useSelector(state => state.user);\r\n    const id = useSelector(state => state.user.selected);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchUser(id));\r\n    }, [dispatch, id]);\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {userData.loading ? (\r\n                <h2>Loading</h2>\r\n            ) : userData.error ? (\r\n                <h2>{userData.error}</h2>\r\n            ) : (\r\n                <div>\r\n                    <h2>User Details</h2>\r\n                    <div>\r\n                        {userData && userData.user.id && (\r\n                            <section className=\"details\">\r\n                                <h3>\r\n                                    {userData.user.id}. {userData.user.name}\r\n                                </h3>\r\n                                <p>Username: {userData.user.username}</p>\r\n                                <p>Email: {userData.user.email}</p>\r\n                                <p>Website: {userData.user.website}</p>\r\n                                <p>Phone: {userData.user.phone}</p>\r\n                                <p>Company: {userData.user.company.name}</p>\r\n                                <p>City: {userData.user.address.city}</p>\r\n                            </section>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport ToDo from \"./components/ToDo\";\nimport UserContainer from \"./components/UserContainer\";\nimport Navbar from \"./components/Navbar\";\nimport UserDetails from \"./components/UserDetails\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <div className='App'>\n                <Navbar />\n                <Route exact path='/' component={ToDo} />\n                <Route path='/users' component={UserContainer} />\n                <Route path='/userdetails' component={UserDetails} />\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n\n// function App() {\n//     const [showToDo, setShowToDo] = useState(true);\n//     // always pass the function to setter if you are updating state based on old state\n//     const handleClick = () => setShowToDo(showToDo => !showToDo);\n//     return (\n//         <div className=\"App\">\n//             {showToDo ? <ToDo /> : <UserContainer />}\n//             <button class=\"appDisplayButton\" onClick={handleClick}>\n//                 {showToDo ? \"Fetch Users\" : \"Hide Users\"}\n//             </button>\n//         </div>\n//     );\n// }\n\n// export default App;\n","import * as actionTypes from \"./userTypes\";\n\nconst initialState = {\n    loading: true,\n    users: [],\n    selected: 0,\n    user: {},\n    error: \"\",\n};\n\nconst userReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_USERS_REQUEST:\n            // console.log(\"state\", state);\n            return {\n                ...state,\n                loading: true,\n            };\n\n        case actionTypes.FETCH_USERS_SUCCESS:\n            // console.log(\"state\", state);\n            // console.log(state.tasks, action.payload.id);\n            return {\n                ...state,\n                loading: false,\n                users: action.payload,\n                error: \"\",\n            };\n\n        case actionTypes.FETCH_USERS_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                users: [],\n                user: {},\n                error: action.payload, //action.payload.\n            };\n\n        case actionTypes.FETCH_USER_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                user: action.payload,\n                error: \"\",\n            };\n\n        case actionTypes.SELECT_USER:\n            return {\n                ...state,\n                selected: action.payload,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default userReducer;\n","import * as actionTypes from \"./taskTypes\";\n\nconst initialState = {\n    tasks: [],\n    showPendingTasks: true,\n};\n\nconst taskReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_TASK:\n            // console.log(\"state\", state);\n            return {\n                ...state,\n                tasks: [\n                    ...state.tasks,\n                    {\n                        id: action.payload.id,\n                        text: action.payload.text,\n                        color: action.payload.color,\n                        completed: false,\n                    },\n                ],\n            };\n\n        case actionTypes.DELETE_TASK:\n            // console.log(\"state\", state);\n            // console.log(state.tasks, action.payload.id);\n            return {\n                ...state,\n                tasks: [\n                    ...state.tasks.filter(\n                        (task) => task.id !== action.payload.id\n                    ),\n                ],\n            };\n\n        case actionTypes.TASK_COMPLETED:\n            return {\n                ...state,\n                tasks: [\n                    ...state.tasks.map((task) =>\n                        task.id === action.payload.id\n                            ? { ...task, completed: true }\n                            : task\n                    ),\n                ],\n            };\n\n        case actionTypes.SHOW_PENDING_TASKS:\n            // console.log(\"state\", state);\n            return {\n                ...state,\n                showPendingTasks: action.payload.status,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default taskReducer;\n","import userReducer from \"./user/userReducer\";\nimport taskReducer from \"./task/taskReducer\";\nimport { combineReducers } from \"@reduxjs/toolkit\";\n\nconst rootReducer = combineReducers({\n    task: taskReducer, //\n    user: userReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n// import taskReducer from \"./task/taskReducer\";\nimport rootReducer from \"./rootReducer\";\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(logger, thunk))\n    // composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n// exports a component Provider\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}